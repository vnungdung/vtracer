name: Release

on:
  release:
    types: [published]

jobs:
  build-cli:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ""

    runs-on: ${{ matrix.os }}
    name: Build CLI (${{ matrix.target }})

    steps:
      - uses: actions/checkout@v4

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Build vtracer CLI
        run: cargo build --release --manifest-path cmdapp/Cargo.toml --target ${{ matrix.target }}

      - name: Upload CLI binary
        uses: actions/upload-artifact@v4
        with:
          name: cli-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/vtracer${{ matrix.ext }}

  build-webapp:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            runtime: win-x64
            libname: vtracer_webapp.dll

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            runtime: linux-x64
            libname: libvtracer_webapp.so

          - os: macos-latest
            target: x86_64-apple-darwin
            runtime: osx-x64
            libname: libvtracer_webapp.dylib

    runs-on: ${{ matrix.os }}
    name: Build WebApp (${{ matrix.runtime }})

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build cdylib
        run: cargo build --release --manifest-path webapp/Cargo.toml --target ${{ matrix.target }}

      - name: Upload shared lib
        uses: actions/upload-artifact@v4
        with:
          name: webapp-${{ matrix.runtime }}
          path: target/${{ matrix.target }}/release/${{ matrix.libname }}

  package-nuget:
    name: Package NuGet and Upload
    runs-on: ubuntu-latest
    needs:
      - build-webapp
      - build-cli

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create NuGet layout
        run: |
          mkdir -p nuget/runtimes/win-x64/native
          mkdir -p nuget/runtimes/linux-x64/native
          mkdir -p nuget/runtimes/osx-x64/native

          cp artifacts/webapp-win-x64/*    nuget/runtimes/win-x64/native/
          cp artifacts/webapp-linux-x64/*  nuget/runtimes/linux-x64/native/
          cp artifacts/webapp-osx-x64/*    nuget/runtimes/osx-x64/native/

      - name: Install cargo-nuget from private GitHub repo
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config --global url."https://${GH_PAT}@github.com/".insteadOf "https://github.com/"
          cargo install cargo-nuget --git https://github.com/vnungdung/cargo-nuget

      - name: Build NuGet package
        run: |
          cd webapp
          cargo-nuget cross \
            --targets win-x64 linux-x64 osx-x64 \
            --win-x64-path ../nuget/runtimes/win-x64/native/vtracer_webapp.dll \
            --linux-x64-path ../nuget/runtimes/linux-x64/native/libvtracer_webapp.so \
            --osx-x64-path ../nuget/runtimes/osx-x64/native/libvtracer_webapp.dylib
          cd ..

      - name: Rename CLI binaries
        run: |
          mkdir -p release
          cp artifacts/cli-x86_64-pc-windows-msvc/vtracer.exe release/vtracer-windows.exe
          cp artifacts/cli-x86_64-unknown-linux-gnu/vtracer release/vtracer-linux
          cp artifacts/cli-x86_64-apple-darwin/vtracer release/vtracer-macos

      - name: Organize final release structure
        run: |
          mkdir -p final-release/cli
          mkdir -p final-release/nuget

          cp release/* final-release/cli/
          cp webapp/*.nupkg final-release/nuget/

          echo "VTracer Release - CLI and NuGet packages included." > final-release/README.txt

      - name: Create release archive (.zip)
        run: |
          zip -r release-vtracer-${{ github.event.release.tag_name }}.zip final-release/

      - name: Upload full release ZIP
        uses: softprops/action-gh-release@v2
        with:
          files: release-vtracer-${{ github.event.release.tag_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_T
